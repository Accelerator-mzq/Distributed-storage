!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FDFS_TEST_MUDULE	fdfs_client_test.c	10;"	d	file:
FDFS_TEST_PROC	fdfs_client_test.c	11;"	d	file:
FILE_ID_LEN	fdfs_client_test.c	13;"	d	file:
PrintEnv	upload.c	/^static void PrintEnv(char *label, char **envp)$/;"	f	file:	signature:(char *label, char **envp)
UPLOAD_MODULE	upload.c	36;"	d	file:
UPLOAD_PROC	upload.c	37;"	d	file:
__anon1::buffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
__anon1::length	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
__anon1::offset	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
buffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
cJSON_AddItemReferenceToArray	cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToObject	cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToArray	cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToObject	cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_CreateArray	cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f	signature:(void)
cJSON_CreateBool	cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f	signature:(int b)
cJSON_CreateDoubleArray	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const double *numbers,int count)
cJSON_CreateFalse	cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f	signature:(void)
cJSON_CreateFloatArray	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const float *numbers,int count)
cJSON_CreateIntArray	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const int *numbers,int count)
cJSON_CreateNull	cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f	signature:(void)
cJSON_CreateNumber	cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f	signature:(double num)
cJSON_CreateObject	cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f	signature:(void)
cJSON_CreateString	cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f	signature:(const char *string)
cJSON_CreateStringArray	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const char **strings,int count)
cJSON_CreateTrue	cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f	signature:(void)
cJSON_Delete	cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f	signature:(cJSON *c)
cJSON_DeleteItemFromArray	cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f	signature:(cJSON *array,int which)
cJSON_DeleteItemFromObject	cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromArray	cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f	signature:(cJSON *array,int which)
cJSON_DetachItemFromObject	cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_Duplicate	cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f	signature:(cJSON *item,int recurse)
cJSON_GetArrayItem	cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f	signature:(cJSON *array,int item)
cJSON_GetArraySize	cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f	signature:(cJSON *array)
cJSON_GetErrorPtr	cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f	signature:(void)
cJSON_GetObjectItem	cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_InitHooks	cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f	signature:(cJSON_Hooks* hooks)
cJSON_InsertItemInArray	cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_Minify	cJSON.c	/^void cJSON_Minify(char *json)$/;"	f	signature:(char *json)
cJSON_New_Item	cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:	signature:(void)
cJSON_Parse	cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f	signature:(const char *value)
cJSON_ParseWithOpts	cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_Print	cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f	signature:(cJSON *item)
cJSON_PrintBuffered	cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintUnformatted	cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f	signature:(cJSON *item)
cJSON_ReplaceItemInArray	cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInObject	cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_free	cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:	signature:(const char *s1,const char *s2)
cJSON_strdup	cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:	signature:(const char* str)
ca_log_lock	make_log.c	/^pthread_mutex_t ca_log_lock=PTHREAD_MUTEX_INITIALIZER;$/;"	v
create_reference	cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:	signature:(cJSON *item)
dumpmsg_to_file	make_log.c	/^int dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,$/;"	f	signature:(char *module_name, char *proc_name, const char *filename, int line, const char *funcname, char *fmt, ...)
ensure	cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:	signature:(printbuffer *p,int needed)
ep	cJSON.c	/^static const char *ep;$/;"	v	file:
firstByteMark	cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
get_buf	usefull.c	/^int get_buf(char **src, int len)$/;"	f	signature:(char **src, int len)
length	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
main	fdfs_client_test.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	upload.c	/^int main ()$/;"	f
make_hmset_command	redis_op.c	/^static char* make_hmset_command(char* key, unsigned int element_num, RFIELDS fields, RVALUES values)$/;"	f	file:	signature:(char* key, unsigned int element_num, RFIELDS fields, RVALUES values)
make_path	make_log.c	/^int make_path(char *path, char *module_name, char *proc_name)$/;"	f	signature:(char *path, char *module_name, char *proc_name)
memstr	usefull.c	/^char* memstr(char* full_data, int full_data_len, char* substr) $/;"	f	signature:(char* full_data, int full_data_len, char* substr)
offset	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
out_put_file	make_log.c	/^int out_put_file(char *path, char *buf)$/;"	f	signature:(char *path, char *buf)
parse_array	cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_array	cJSON.c	/^static const char *parse_array(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_hex4	cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:	signature:(const char *str)
parse_number	cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:	signature:(cJSON *item,const char *num)
parse_object	cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_object	cJSON.c	/^static const char *parse_object(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_string	cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:	signature:(cJSON *item,const char *str)
parse_value	cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_value	cJSON.c	/^static const char *parse_value(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
pow2gt	cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:	signature:(int x)
print_array	cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_number	cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_object	cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_string	cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_string_ptr	cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:	signature:(const char *str,printbuffer *p)
print_value	cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
printbuffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon1	file:
rcsid	upload.c	/^static const char rcsid[] = "$Id: echo.c,v 1.5 1999\/07\/28 00:29:37 roberts Exp $";$/;"	v	file:
rop_connectdb	redis_op.c	/^redisContext* rop_connectdb(char *ip_str, char* port_str, char *pwd)$/;"	f	signature:(char *ip_str, char* port_str, char *pwd)
rop_connectdb_nopwd	redis_op.c	/^redisContext* rop_connectdb_nopwd(char *ip_str, char* port_str)$/;"	f	signature:(char *ip_str, char* port_str)
rop_connectdb_timeout	redis_op.c	/^redisContext* rop_connectdb_timeout(char* ip_str, char *port_str, struct timeval *timeout)$/;"	f	signature:(char* ip_str, char *port_str, struct timeval *timeout)
rop_connectdb_unix	redis_op.c	/^redisContext* rop_connectdb_unix(char *sock_path, char *pwd)$/;"	f	signature:(char *sock_path, char *pwd)
rop_create_or_replace_hash_table	redis_op.c	/^int rop_create_or_replace_hash_table(redisContext* conn,$/;"	f	signature:(redisContext* conn, char* key, unsigned int element_num, RFIELDS fields, RVALUES values)
rop_del_key	redis_op.c	/^int rop_del_key(redisContext *conn, char *key)$/;"	f	signature:(redisContext *conn, char *key)
rop_disconnect	redis_op.c	/^void rop_disconnect(redisContext* conn)$/;"	f	signature:(redisContext* conn)
rop_flush_database	redis_op.c	/^int rop_flush_database(redisContext *conn)$/;"	f	signature:(redisContext *conn)
rop_get_list_cnt	redis_op.c	/^int rop_get_list_cnt(redisContext *conn, char *key)$/;"	f	signature:(redisContext *conn, char *key)
rop_get_string	redis_op.c	/^int rop_get_string(redisContext* conn, char *key, char *str)$/;"	f	signature:(redisContext* conn, char *key, char *str)
rop_hash_set_append	redis_op.c	/^int rop_hash_set_append(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num)$/;"	f	signature:(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num)
rop_hincrement_one_field	redis_op.c	/^int rop_hincrement_one_field(redisContext *conn, char *key, char *field, unsigned int num)$/;"	f	signature:(redisContext *conn, char *key, char *field, unsigned int num)
rop_is_key_exist	redis_op.c	/^int rop_is_key_exist(redisContext *conn, char* key)$/;"	f	signature:(redisContext *conn, char* key)
rop_list_push	redis_op.c	/^int rop_list_push(redisContext *conn, char *key, char *value)$/;"	f	signature:(redisContext *conn, char *key, char *value)
rop_list_push_append	redis_op.c	/^int rop_list_push_append(redisContext *conn, char *key, RVALUES values, int val_num)$/;"	f	signature:(redisContext *conn, char *key, RVALUES values, int val_num)
rop_range_list	redis_op.c	/^int rop_range_list(redisContext *conn, char *key, int from_pos, int count, RVALUES values, int *get_num)$/;"	f	signature:(redisContext *conn, char *key, int from_pos, int count, RVALUES values, int *get_num)
rop_redis_append	redis_op.c	/^int rop_redis_append(redisContext *conn, RCOMMANDS cmds, int cmd_num)$/;"	f	signature:(redisContext *conn, RCOMMANDS cmds, int cmd_num)
rop_redis_command	redis_op.c	/^int rop_redis_command(redisContext *conn, char *cmd)$/;"	f	signature:(redisContext *conn, char *cmd)
rop_selectdatabase	redis_op.c	/^int rop_selectdatabase(redisContext *conn, unsigned int db_no)$/;"	f	signature:(redisContext *conn, unsigned int db_no)
rop_set_key_lifecycle	redis_op.c	/^int rop_set_key_lifecycle(redisContext *conn, char *key, time_t delete_time)$/;"	f	signature:(redisContext *conn, char *key, time_t delete_time)
rop_set_string	redis_op.c	/^int rop_set_string(redisContext* conn, char *key, char *str)$/;"	f	signature:(redisContext* conn, char *key, char *str)
rop_show_keys	redis_op.c	/^void rop_show_keys(redisContext *conn, char* pattern)$/;"	f	signature:(redisContext *conn, char* pattern)
rop_test_reply_type	redis_op.c	/^void rop_test_reply_type(redisReply *reply)$/;"	f	signature:(redisReply *reply)
rop_trim_list	redis_op.c	/^int rop_trim_list(redisContext *conn, char *key, int begin, int end)$/;"	f	signature:(redisContext *conn, char *key, int begin, int end)
rop_zset_get_score	redis_op.c	/^int rop_zset_get_score(redisContext *conn, char *key, char *member)$/;"	f	signature:(redisContext *conn, char *key, char *member)
rop_zset_increment	redis_op.c	/^int rop_zset_increment(redisContext *conn, char* key, char* member)$/;"	f	signature:(redisContext *conn, char* key, char* member)
rop_zset_increment_append	redis_op.c	/^int rop_zset_increment_append(redisContext *conn, char *key, RVALUES values, int val_num)$/;"	f	signature:(redisContext *conn, char *key, RVALUES values, int val_num)
skip	cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:	signature:(const char *in)
suffix_object	cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:	signature:(cJSON *prev,cJSON *item)
update	cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:	signature:(printbuffer *p)
upload_file	usefull.c	/^int upload_file(char *src, int len)$/;"	f	signature:(char *src, int len)
